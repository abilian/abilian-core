{"version":3,"file":"scribe-plugin-toolbar.js","mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["../src/scribe-plugin-toolbar.js"],"sourcesContent":["define('scribe-plugin-toolbar',[],function () {\n\n  'use strict';\n\n  return function (toolbarNode) {\n    return function (scribe) {\n      var buttons = toolbarNode.querySelectorAll('button[data-command-name]');\n\n      Array.prototype.forEach.call(buttons, function (button) {\n        button.addEventListener('click', function () {\n          // Look for a predefined command.\n          var command = scribe.getCommand(button.dataset.commandName);\n\n          /**\n           * Focus will have been taken away from the Scribe instance when\n           * clicking on a button (Chrome will return the focus automatically\n           * but only if the selection is not collapsed. As per: http://jsbin.com/tupaj/1/edit?html,js,output).\n           * It is important that we focus the instance again before executing\n           * the command, because it might rely on selection data.\n           */\n          scribe.el.focus();\n          command.execute();\n          /**\n           * Chrome has a bit of magic to re-focus the `contenteditable` when a\n           * command is executed.\n           * As per: http://jsbin.com/papi/1/edit?html,js,output\n           */\n        });\n\n        // Keep the state of toolbar buttons in sync with the current selection.\n        // Unfortunately, there is no `selectionchange` event.\n        scribe.el.addEventListener('keyup', updateUi);\n        scribe.el.addEventListener('mouseup', updateUi);\n\n        scribe.el.addEventListener('focus', updateUi);\n        scribe.el.addEventListener('blur', updateUi);\n\n        // We also want to update the UI whenever the content changes. This\n        // could be when one of the toolbar buttons is actioned.\n        scribe.on('content-changed', updateUi);\n\n        function updateUi() {\n          // Look for a predefined command.\n          var command = scribe.getCommand(button.dataset.commandName);\n\n          var selection = new scribe.api.Selection();\n\n          // TODO: Do we need to check for the selection?\n          if (selection.range && command.queryState()) {\n            button.classList.add('active');\n          } else {\n            button.classList.remove('active');\n          }\n\n          if (selection.range && command.queryEnabled()) {\n            button.removeAttribute('disabled');\n          } else {\n            button.setAttribute('disabled', 'disabled');\n          }\n        }\n      });\n    };\n  };\n\n});\n\n"],"names":[]}