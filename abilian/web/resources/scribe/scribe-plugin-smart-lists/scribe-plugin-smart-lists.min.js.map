{"version":3,"file":"scribe-plugin-smart-lists.min.js","mappings":"AAAAA,OAAA,+BAAA,WAIA,MAAA,YAYA,QAAAC,GAAAC,GACA,MAAA,MAAAA,GAAA,MAAAA,GAAA,MAAAA,EAXA,GAAAC,IACAC,GAAA,QACAC,GAAA,IACAC,GAAA,IACAC,GAAA,IACAC,GAAA,IAEAC,KAAA,IAOA,OAAA,UAAAC,GAIA,QAAAC,GAAAC,GACA,KAAAA,IAAAF,EAAAG,QAAAC,eAAAF,IACAA,EAAAA,EAAAG,UAGA,OAAAH,GAGA,QAAAI,KACA,GAQAC,GARAC,EAAA,GAAAR,GAAAS,IAAAC,UACAC,EAAAH,EAAAA,UAAAI,UAcA,IANAD,EAAAE,WAAAC,KAAAC,UACAR,EAAAI,EACAA,EAAAK,WAAAH,WAAAC,KAAAC,YACAR,EAAAI,EAAAK,aAGAT,EAWA,KAAA,IAAAU,OAAA,8BAVA,IAAAZ,GAAAE,EAAAF,UAKAE,GAAAW,iBACAb,EAAAc,YAAAZ,EAAAW,iBAEAb,EAAAc,YAAAZ,GAMA,QAAAa,GAAAC,GACA,GAAAC,EAEAC,GAAAC,EACAA,EAAAC,EAGAA,EAAAhC,EAAA4B,EAAAK,SAEA,IAAAlB,GAAA,GAAAR,GAAAS,IAAAC,UAGAC,EAAAH,EAAAmB,MAAAC,wBAGAC,EAAA5B,EAAAU,EACA,IAAAkB,GAAA,MAAAA,EAAAC,QAAA,CAIA,GAAAC,GAAAxC,EAAAoB,EAAAqB,YAAA,IACAC,EAAA,IAAAzB,EAAAmB,MAAAO,SACA3C,GAAAiC,IAAA,UAAAC,GAAAM,GAAAE,IACAX,EAAA,sBAcA,IAAAa,GAGA,QAFAxB,EAAAO,iBAAAP,EAAAO,gBAAAc,YACArB,EAAAqB,aACAI,KAAA,IAAAC,MAAA,EAAA,EACA,OAAAd,GAAA,MAAAC,GAAA,UAAAC,GAAAU,IACAb,EAAA,qBAIAA,IAEAD,EAAAiB,iBAEAtC,EAAAuC,mBAAAC,IAAA,WACAxC,EAAAyC,WAAAnB,GAAAoB,UAGApC,OA/FA,GAAAiB,GAAAC,EAAAC,CAoGAzB,GAAA2C,GAAAC,iBAAA,WAAAxB","sources":["../src/scribe-plugin-smart-lists.js"],"sourcesContent":["define('scribe-plugin-smart-lists',[], function () {\n\n  'use strict';\n\n  return function () {\n\n    var keys = {\n      32: 'Space',\n      42: '*',\n      45: '-',\n      46: '.',\n      49: '1',\n      // Bullet insertion keycode, most likely only working on OS X...\n      8226:  '•'\n    };\n\n    function isUnorderedListChar(string) {\n      return string === '*' || string === '-' || string === '•';\n    }\n\n    return function (scribe) {\n\n      var preLastChar, lastChar, currentChar;\n\n      function findBlockContainer(node) {\n        while (node && ! scribe.element.isBlockElement(node)) {\n          node = node.parentNode;\n        }\n\n        return node;\n      }\n\n      function removeSelectedTextNode() {\n        var selection = new scribe.api.Selection();\n        var container = selection.selection.anchorNode;\n        /**\n         * Firefox: Selection object never gets access to text nodes, only\n         * parent elements.\n         * As per: http://jsbin.com/rotus/2/edit?js,output,console\n         * Bugzilla: https://bugzilla.mozilla.org/show_bug.cgi?id=1042701\n         */\n        var textNode;\n        if (container.nodeType === Node.TEXT_NODE) {\n          textNode = container;\n        } else if (container.firstChild.nodeType === Node.TEXT_NODE) {\n          textNode = container.firstChild;\n        }\n\n        if (textNode) {\n          var parentNode = textNode.parentNode;\n          /**\n           * Firefox: Given text of \"1.\", we sometimes have two text nodes\n           * (why?): \"1\" and \".\"\n           */\n          if (textNode.previousSibling) {\n            parentNode.removeChild(textNode.previousSibling);\n          }\n          parentNode.removeChild(textNode);\n        } else {\n          throw new Error('Cannot empty non-text node!');\n        }\n      }\n\n      function input(event) {\n        var listCommand;\n\n        preLastChar = lastChar;\n        lastChar = currentChar;\n        // FIXME: Chrome / FF, theoretically we should be using event.key?\n        //        can we abstract this madness?\n        currentChar = keys[event.charCode];\n\n        var selection = new scribe.api.Selection();\n\n        // TODO: if a <p> with just this content\n        var container = selection.range.commonAncestorContainer;\n\n        // If in a <p>\n        var blockContainer = findBlockContainer(container);\n        if (blockContainer && blockContainer.tagName === 'P') {\n          // Warning: There is no guarantee that `container` will be a text node\n          // Failing Firefox tests\n\n          var startOfLineIsUList = isUnorderedListChar(container.textContent[0]);\n          var cursorIsInSecondPosition = selection.range.endOffset === 1;\n          if (isUnorderedListChar(lastChar) && currentChar === 'Space' && startOfLineIsUList && cursorIsInSecondPosition) {\n            listCommand = 'insertUnorderedList';\n          }\n\n          /**\n           * Firefox: Selection object never gets access to text nodes, only\n           * parent elements. This means that *sometimes* unordered lists\n           * will not work.\n           * As per: http://jsbin.com/rotus/2/edit?js,output,console\n           * Bugzilla: https://bugzilla.mozilla.org/show_bug.cgi?id=1042701\n           */\n\n          // Some browsers split text nodes randomly, so we can't be sure the\n          // prefix will be contained within a single text node (observed in\n          // Firefox)\n          var startOfLineIsOList = [\n            container.previousSibling && container.previousSibling.textContent,\n            container.textContent\n          ].join('').slice(0, 2) === '1.';\n          if (preLastChar === '1' && lastChar === '.' && currentChar === 'Space' && startOfLineIsOList) {\n            listCommand = 'insertOrderedList';\n          }\n        }\n\n        if (listCommand) {\n          // Ignore the typed character\n          event.preventDefault();\n\n          scribe.transactionManager.run(function() {\n            scribe.getCommand(listCommand).execute();\n\n            // Clear \"* \"/etc from the list item\n            removeSelectedTextNode();\n          });\n        }\n      }\n\n      scribe.el.addEventListener('keypress', input);\n    };\n  };\n\n});\n\n"],"names":["define","isUnorderedListChar","string","keys",32,42,45,46,49,8226,"scribe","findBlockContainer","node","element","isBlockElement","parentNode","removeSelectedTextNode","textNode","selection","api","Selection","container","anchorNode","nodeType","Node","TEXT_NODE","firstChild","Error","previousSibling","removeChild","input","event","listCommand","preLastChar","lastChar","currentChar","charCode","range","commonAncestorContainer","blockContainer","tagName","startOfLineIsUList","textContent","cursorIsInSecondPosition","endOffset","startOfLineIsOList","join","slice","preventDefault","transactionManager","run","getCommand","execute","el","addEventListener"]}